import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function diagnosticTablasControles() {
  console.log('üîç DIAGN√ìSTICO DE TABLAS DE CONTROLES');
  console.log('=====================================\n');

  try {
    // 1. Verificar si existe la tabla controles (incorrecta)
    console.log('1. üîç Verificando tabla "controles" (incorrecta)...');
    try {
      const controlesCount = await prisma.$queryRaw`SELECT COUNT(*) as count FROM information_schema.tables WHERE table_name = 'controles'`;
      console.log(`   üìä Tabla "controles" existe: ${controlesCount[0]?.count > 0 ? 'S√ç' : 'NO'}`);
      
      if (controlesCount[0]?.count > 0) {
        const controlesData = await prisma.$queryRaw`SELECT COUNT(*) as count FROM controles`;
        console.log(`   üìä Registros en "controles": ${controlesData[0]?.count || 0}`);
      }
    } catch (error) {
      console.log(`   ‚ùå Error verificando tabla "controles": ${error}`);
    }

    // 2. Verificar si existe la tabla control_prenatal (correcta)
    console.log('\n2. ‚úÖ Verificando tabla "control_prenatal" (correcta)...');
    try {
      const controlPrenatalCount = await prisma.$queryRaw`SELECT COUNT(*) as count FROM information_schema.tables WHERE table_name = 'control_prenatal'`;
      console.log(`   üìä Tabla "control_prenatal" existe: ${controlPrenatalCount[0]?.count > 0 ? 'S√ç' : 'NO'}`);
      
      if (controlPrenatalCount[0]?.count > 0) {
        const controlPrenatalData = await prisma.$queryRaw`SELECT COUNT(*) as count FROM control_prenatal`;
        console.log(`   üìä Registros en "control_prenatal": ${controlPrenatalData[0]?.count || 0}`);
      }
    } catch (error) {
      console.log(`   ‚ùå Error verificando tabla "control_prenatal": ${error}`);
    }

    // 3. Verificar qu√© tabla est√° usando el modelo Prisma
    console.log('\n3. üîç Verificando configuraci√≥n del modelo Prisma...');
    try {
      // Intentar usar controlPrenatal (deber√≠a funcionar si est√° en el schema)
      const controlPrenatalTest = await (prisma as any).controlPrenatal?.findFirst?.();
      console.log(`   ‚úÖ prisma.controlPrenatal funciona: ${controlPrenatalTest !== undefined ? 'S√ç' : 'NO'}`);
    } catch (error) {
      console.log(`   ‚ùå prisma.controlPrenatal error: ${error}`);
    }

    try {
      // Intentar usar controles (no deber√≠a funcionar si no est√° en el schema)
      const controlesTest = await (prisma as any).controles?.findFirst?.();
      console.log(`   ‚ö†Ô∏è  prisma.controles funciona: ${controlesTest !== undefined ? 'S√ç (PROBLEMA)' : 'NO'}`);
    } catch (error) {
      console.log(`   ‚úÖ prisma.controles error (esperado): ${error}`);
    }

    // 4. Verificar referencias en el c√≥digo
    console.log('\n4. üìã Resumen del diagn√≥stico:');
    console.log('   - La migraci√≥n 20251021235348 crea la tabla "control_prenatal" correctamente');
    console.log('   - El schema.prisma actual NO contiene el modelo "control_prenatal"');
    console.log('   - El c√≥digo hace referencia a "controlPrenatal" pero el modelo no existe');
    console.log('   - Si existe tabla "controles", debe ser eliminada');

  } catch (error) {
    console.error('‚ùå Error general en diagn√≥stico:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar diagn√≥stico
diagnosticTablasControles()
  .then(() => {
    console.log('\n‚úÖ Diagn√≥stico completado');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error en diagn√≥stico:', error);
    process.exit(1);
  });